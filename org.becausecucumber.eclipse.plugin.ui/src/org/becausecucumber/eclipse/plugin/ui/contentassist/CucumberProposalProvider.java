/*
* generated by Xtext
*/
package org.becausecucumber.eclipse.plugin.ui.contentassist;

import java.util.Collection;

import org.becausecucumber.eclipse.plugin.common.searcher.AbstractAnnotationDescriptor;
import org.becausecucumber.eclipse.plugin.common.searcher.PerformSearcher;
import org.becausecucumber.eclipse.plugin.cucumber.Step;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.impl.RuleCallImpl;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.inject.Inject;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to
 * customize content assistant
 */
@SuppressWarnings("restriction")
public class CucumberProposalProvider
		extends org.becausecucumber.eclipse.plugin.ui.contentassist.AbstractCucumberProposalProvider {

	@Inject
	private AbstractAnnotationDescriptor descriptor;

	@Inject
	private IImageHelper helper;

	public final static String[] STEPS = { "Given", "When", "Then", "And", "But" };
	@Inject
	private PerformSearcher matcher;

	public void complete_Step(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (((RuleCallImpl) context.getLastCompleteNode().getGrammarElement()).getRule().getName().equals("EOL")
				&& context.getPrefix().length() == 0) {

			for (@SuppressWarnings("unused")
			String entry : descriptor.getNames()) {
				// System.out.println("get the complete word in context
				// is:"+entry);
				// acceptor.accept(createCompletionProposal(entry + " ",entry+"
				// somethig\n this is a step keyword",image, context));
			}
		}
	}

	public void complete_StepDescription(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		// context.getCurrentModel();
		Image image = getImage("cukes.gif");

		Step stepdes = (Step) model;
		String descriptions = "";
		if (stepdes != null) {
			if (stepdes.getDescription() != null) {
				descriptions = stepdes.getDescription().trim();
			}
		}
		// Log.info("Match Cucumber Step defination:\""+descriptions+"\"");
		/*
		 * final CucumberCounter counter=new CucumberCounter();
		 * matcher.matcher(descriptions, counter); List<Entry> entries =
		 * counter.getFiles(); Collection<String> proposals = new
		 * TreeSet<String>();
		 * 
		 * for (Entry entry : entries) { String proposal = entry.getContent();
		 * //IFile file = entry.getFile(); if (proposal.charAt(0) == '^') {
		 * proposal = proposal.substring(1); } if
		 * (proposal.charAt(proposal.length() - 1) == '$') { proposal =
		 * proposal.substring(0, proposal.length() - 1); }
		 * proposal=proposal.replaceAll("\\(.*?\\)", " ");
		 * proposals.add(proposal); }
		 */
		// CommonPluginUtils.getInstance();
		Collection<String> proposals = matcher.findProposals(descriptions);

		for (String proposal : proposals) {
			String display = proposal;
			acceptor.accept(createCompletionProposal(proposal, display, image, context));
		}

	}

	private Image getImage(String name) {
		if (name == null) {
			name = "cukes.gif";
		}
		return helper.getImage(name);
	}

}
