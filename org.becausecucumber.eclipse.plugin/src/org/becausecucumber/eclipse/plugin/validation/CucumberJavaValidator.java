/*
* generated by Xtext
*/
package org.becausecucumber.eclipse.plugin.validation;

import java.util.ArrayList;
import java.util.List;

import org.becausecucumber.eclipse.plugin.common.console.Log;
import org.becausecucumber.eclipse.plugin.common.searcher.PerformSearcher;
import org.becausecucumber.eclipse.plugin.common.searcher.PerformSearcher.Entry;
import org.becausecucumber.eclipse.plugin.cucumber.CucumberPackage;
import org.becausecucumber.eclipse.plugin.cucumber.Step;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.xtext.mwe.Validator;
import org.eclipse.xtext.validation.Check;

import com.google.inject.Inject;


/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
public class CucumberJavaValidator extends org.becausecucumber.eclipse.plugin.validation.AbstractCucumberJavaValidator {

//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital", MyDslPackage.Literals.GREETING__NAME);
//		}
//	}
	
	/*
	 * this method used to valid the synax in the cucubmer file
	 */
	public final static String NO_DEFINATION_STEP="NDS";
	public final static String MULTILE_STEP="MS";
	
	@Inject
	private PerformSearcher matcher;
	
	public static boolean isvalidator=false;
	
	//public static final IPreferenceStore store = CucumberPeopleActivator.getInstance().getPreferenceStore();
	
	
	
	@Override
	protected void checkDone() {
		// TODO Auto-generated method stub
		//super.checkDone();
		Log.warning("Step Definition for this step: ");
		MessageDialog.openInformation(Display.getCurrent().getActiveShell(), "Cucumber Feature Validataion", "Complete all the step definations validataion in currnet feature file!");
	}

	@Check
	public void checkStepMatching(Step step) {
		//PluginUtils.log(true,"Cucumber feature validator status is: "+isvalidator);
		
		if(isvalidator){
			String descriptions = step.getDescription().trim();
			//DocString code = step.getCode();
			//EList<Table> tables = step.getTables();
			//step.getTables().
			
			final CucumberCounter counter=new CucumberCounter();
			matcher.matcher(descriptions,counter);
			int size = counter.getNumbers();
			List<Entry> files = counter.getFiles();
			if(size==0){
				Log.warning("Step Definition for this step: "+descriptions+" cannot be found in current eclipse workspace,please take to implement it,just click the left warning icon for this step.");
	         	warning("Step Definition not found in current project,please implement it first.", 
							CucumberPackage.Literals.STEP__DESCRIPTION,NO_DEFINATION_STEP,descriptions);
	         }else if(size>1){
	        	String filepath="";
	        	for(Entry file:files){
	        		filepath=filepath+file.getFile().getFullPath().toOSString()+"\n";
	        	}
	        	Log.warning("found "+size+" Step Definition for this step: "+descriptions+" in these files.\n"+filepath);
	        	warning("found "+size+" Step Definition in these files.\n"+filepath, 
							CucumberPackage.Literals.STEP__DESCRIPTION,MULTILE_STEP,descriptions);
	         }else{
	         	//System.out.println("change the warning or error status to success validation status");
	         	//info("good is at we are" + description, 
						//	CucumberPackage.Literals.STEP__DESCRIPTION,MULTILE_STEP,description);
	        	//Log.info("Cucumber Step : "+descriptions+" definition is fine,if this step still shows warning marker ,you can reopen current feature to resolve the problem.");
	         }
			
		}else{
			//Log.warning("Please go to preference page to enable the cucumber validation feature( Window--> Preferences-->Cucumber-->Allow Cucumber Validators automatically)");
		}
	}

    private final static class CucumberCounter implements PerformSearcher.MatcherCollector{

	   private int count = 0;
	   private List<Entry> files=new ArrayList<Entry>();
		
		public int getNumbers() {
			return count;
		}
		public List<Entry> getFiles(){
			return files;
		}
		
		@Override
		public void foundMatcher(Entry entry) {
			// TODO Auto-generated method stub
			count++;
			files.add(entry);
		}
    	
    }
    
    
    public static class Disabled extends Validator {
    		
    	}
}
